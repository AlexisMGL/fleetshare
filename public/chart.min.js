(() => {
  class Chart {
    constructor(ctx, config) {
      this.ctx = ctx;
      this.config = config;
      this.width = ctx.canvas.width;
      this.height = ctx.canvas.height;
      this.draw();
    }
    destroy() {
      this.ctx.clearRect(0, 0, this.width, this.height);
    }
    draw() {
      const ctx = this.ctx;
      const { datasets, labels } = this.config.data;
      const n = labels.length;
      const margin = 30;
      const w = this.width - margin * 2;
      const h = this.height - margin * 2;
      let minY = Infinity, maxY = -Infinity;
      for (const ds of datasets) {
        for (const v of ds.data) {
          if (v < minY) minY = v;
          if (v > maxY) maxY = v;
        }
      }
      if (minY === maxY) { minY -= 1; maxY += 1; }
      ctx.clearRect(0, 0, this.width, this.height);
      ctx.beginPath();
      ctx.strokeStyle = '#ccc';
      ctx.moveTo(margin, margin);
      ctx.lineTo(margin, margin + h);
      ctx.lineTo(margin + w, margin + h);
      ctx.stroke();
      for (const ds of datasets) {
        ctx.beginPath();
        ctx.strokeStyle = ds.borderColor || 'blue';
        ds.data.forEach((val, i) => {
          const x = margin + (i / (n - 1)) * w;
          const y = margin + h - ((val - minY) / (maxY - minY)) * h;
          if (i === 0) ctx.moveTo(x, y);
          else ctx.lineTo(x, y);
        });
        ctx.stroke();
      }
    }
  }
  window.Chart = Chart;
})();
